/*
 * Helper functions for accessing the ring buffer and buffer descriptors
 * in the shared memory region.
 * Might be replaced with more pancake feature in the future.
 */

/* Buffer descriptor
typedef struct buff_desc {
    uintptr_t encoded_addr; // encoded dma addresses
    uint64_t len; // associated memory lengths
    void *cookie; // index into client side metadata
} buff_desc_t;
*/

fun buff_desc_encoded_addr(1 buff_desc) {
    var encoded_addr = 0;
    !ldw encoded_addr, buff_desc;
    return encoded_addr;
}

fun buff_desc_encoded_addr_set(1 buff_desc, 1 buffer) {
    !stw buffer, buff_desc;
    return 0;
}

fun buff_desc_len(1 buff_desc) {
    var len = 0;
    !ldw len, buff_desc + WORD_SIZE;
    return len;
}

fun buff_desc_len_set(1 buff_desc, 1 len) {
    !stw len, buff_desc + WORD_SIZE;
    return 0;
}

fun buff_desc_cookie(1 buff_desc) {
    var cookie = 0;
    !ldw cookie, buff_desc + 2 * WORD_SIZE;
    return cookie;
}

fun buff_desc_cookie_set(1 buff_desc, 1 cookie) {
    !stw cookie, buff_desc + 2 * WORD_SIZE;
    return 0;
}

/* Circular buffer containing descriptors
typedef struct ring_buffer {
    uint64_t write_idx;
    uint64_t read_idx;
    buff_desc_t buffers[SIZE];
} ring_buffer_t;
*/

fun ring_buffer_write_idx(1 ring) {
    var write_idx = 0;
    !ldw write_idx, ring;
    return write_idx;
}

fun ring_buffer_write_idx_set(1 ring, 1 write_idx) {
    !stw write_idx, ring;
    return 0;
}

fun ring_buffer_read_idx(1 ring) {
    var read_idx = 0;
    !ldw read_idx, ring + WORD_SIZE;
    return read_idx;
}

fun ring_buffer_read_idx_set(1 ring, 1 read_idx) {
    !stw read_idx, ring + WORD_SIZE;
    return 0;
}

// Returns `&ring->buffers[idx % SIZE]`
fun ring_buffer_buffers(1 ring, 1 idx) {
    var write_idx = 0;
    write_idx = pnk_modulo(idx, SIZE);
    var offset = 2 * WORD_SIZE + 3 * WORD_SIZE * idx;
    return (ring + offset);
}
